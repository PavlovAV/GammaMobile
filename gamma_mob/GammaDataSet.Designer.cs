//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8670
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.CompactFramework.Design.Data, версия: 2.0.50727.8670.
// 
namespace gamma_mob {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GammaDataSet")]
    public partial class GammaDataSet : global::System.Data.DataSet {
        
        private DocMobGroupPackOrderGroupPacksDataTable tableDocMobGroupPackOrderGroupPacks;
        
        private DocMobGroupPackOrdersDataTable tableDocMobGroupPackOrders;
        
        private vGroupPackOrdersDataTable tablevGroupPackOrders;
        
        private global::System.Data.DataRelation relationFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GammaDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocMobGroupPackOrderGroupPacksDataTable DocMobGroupPackOrderGroupPacks {
            get {
                return this.tableDocMobGroupPackOrderGroupPacks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocMobGroupPackOrdersDataTable DocMobGroupPackOrders {
            get {
                return this.tableDocMobGroupPackOrders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vGroupPackOrdersDataTable vGroupPackOrders {
            get {
                return this.tablevGroupPackOrders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GammaDataSet cln = ((GammaDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DocMobGroupPackOrderGroupPacks"] != null)) {
                    base.Tables.Add(new DocMobGroupPackOrderGroupPacksDataTable(ds.Tables["DocMobGroupPackOrderGroupPacks"]));
                }
                if ((ds.Tables["DocMobGroupPackOrders"] != null)) {
                    base.Tables.Add(new DocMobGroupPackOrdersDataTable(ds.Tables["DocMobGroupPackOrders"]));
                }
                if ((ds.Tables["vGroupPackOrders"] != null)) {
                    base.Tables.Add(new vGroupPackOrdersDataTable(ds.Tables["vGroupPackOrders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDocMobGroupPackOrderGroupPacks = ((DocMobGroupPackOrderGroupPacksDataTable)(base.Tables["DocMobGroupPackOrderGroupPacks"]));
            if ((initTable == true)) {
                if ((this.tableDocMobGroupPackOrderGroupPacks != null)) {
                    this.tableDocMobGroupPackOrderGroupPacks.InitVars();
                }
            }
            this.tableDocMobGroupPackOrders = ((DocMobGroupPackOrdersDataTable)(base.Tables["DocMobGroupPackOrders"]));
            if ((initTable == true)) {
                if ((this.tableDocMobGroupPackOrders != null)) {
                    this.tableDocMobGroupPackOrders.InitVars();
                }
            }
            this.tablevGroupPackOrders = ((vGroupPackOrdersDataTable)(base.Tables["vGroupPackOrders"]));
            if ((initTable == true)) {
                if ((this.tablevGroupPackOrders != null)) {
                    this.tablevGroupPackOrders.InitVars();
                }
            }
            this.relationFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders = this.Relations["FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GammaDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GammaDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDocMobGroupPackOrderGroupPacks = new DocMobGroupPackOrderGroupPacksDataTable();
            base.Tables.Add(this.tableDocMobGroupPackOrderGroupPacks);
            this.tableDocMobGroupPackOrders = new DocMobGroupPackOrdersDataTable();
            base.Tables.Add(this.tableDocMobGroupPackOrders);
            this.tablevGroupPackOrders = new vGroupPackOrdersDataTable();
            base.Tables.Add(this.tablevGroupPackOrders);
            this.relationFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders = new global::System.Data.DataRelation("FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders", new global::System.Data.DataColumn[] {
                        this.tableDocMobGroupPackOrders.DocMobGroupPackOrderIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDocMobGroupPackOrderGroupPacks.DocMobGroupPackOrderIDColumn}, false);
            this.Relations.Add(this.relationFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocMobGroupPackOrderGroupPacks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocMobGroupPackOrders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevGroupPackOrders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GammaDataSet ds = new GammaDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DocMobGroupPackOrderGroupPacksRowChangeEventHandler(object sender, DocMobGroupPackOrderGroupPacksRowChangeEvent e);
        
        public delegate void DocMobGroupPackOrdersRowChangeEventHandler(object sender, DocMobGroupPackOrdersRowChangeEvent e);
        
        public delegate void vGroupPackOrdersRowChangeEventHandler(object sender, vGroupPackOrdersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocMobGroupPackOrderGroupPacksDataTable : global::System.Data.TypedTableBase<DocMobGroupPackOrderGroupPacksRow> {
            
            private global::System.Data.DataColumn columnDocMobGroupPackOrderID;
            
            private global::System.Data.DataColumn columnGroupPackID;
            
            private global::System.Data.DataColumn columnBarcode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksDataTable() {
                this.TableName = "DocMobGroupPackOrderGroupPacks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocMobGroupPackOrderGroupPacksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocMobGroupPackOrderIDColumn {
                get {
                    return this.columnDocMobGroupPackOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupPackIDColumn {
                get {
                    return this.columnGroupPackID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeColumn {
                get {
                    return this.columnBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow this[int index] {
                get {
                    return ((DocMobGroupPackOrderGroupPacksRow)(this.Rows[index]));
                }
            }
            
            public event DocMobGroupPackOrderGroupPacksRowChangeEventHandler DocMobGroupPackOrderGroupPacksRowChanging;
            
            public event DocMobGroupPackOrderGroupPacksRowChangeEventHandler DocMobGroupPackOrderGroupPacksRowChanged;
            
            public event DocMobGroupPackOrderGroupPacksRowChangeEventHandler DocMobGroupPackOrderGroupPacksRowDeleting;
            
            public event DocMobGroupPackOrderGroupPacksRowChangeEventHandler DocMobGroupPackOrderGroupPacksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocMobGroupPackOrderGroupPacksRow(DocMobGroupPackOrderGroupPacksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow AddDocMobGroupPackOrderGroupPacksRow(DocMobGroupPackOrdersRow parentDocMobGroupPackOrdersRowByFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders, long GroupPackID, string Barcode) {
                DocMobGroupPackOrderGroupPacksRow rowDocMobGroupPackOrderGroupPacksRow = ((DocMobGroupPackOrderGroupPacksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        GroupPackID,
                        Barcode};
                if ((parentDocMobGroupPackOrdersRowByFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders != null)) {
                    columnValuesArray[0] = parentDocMobGroupPackOrdersRowByFK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders[0];
                }
                rowDocMobGroupPackOrderGroupPacksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDocMobGroupPackOrderGroupPacksRow);
                return rowDocMobGroupPackOrderGroupPacksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow FindByDocMobGroupPackOrderIDGroupPackID(long DocMobGroupPackOrderID, long GroupPackID) {
                return ((DocMobGroupPackOrderGroupPacksRow)(this.Rows.Find(new object[] {
                            DocMobGroupPackOrderID,
                            GroupPackID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DocMobGroupPackOrderGroupPacksDataTable cln = ((DocMobGroupPackOrderGroupPacksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DocMobGroupPackOrderGroupPacksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocMobGroupPackOrderID = base.Columns["DocMobGroupPackOrderID"];
                this.columnGroupPackID = base.Columns["GroupPackID"];
                this.columnBarcode = base.Columns["Barcode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocMobGroupPackOrderID = new global::System.Data.DataColumn("DocMobGroupPackOrderID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocMobGroupPackOrderID);
                this.columnGroupPackID = new global::System.Data.DataColumn("GroupPackID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupPackID);
                this.columnBarcode = new global::System.Data.DataColumn("Barcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDocMobGroupPackOrderID,
                                this.columnGroupPackID}, true));
                this.columnDocMobGroupPackOrderID.AllowDBNull = false;
                this.columnGroupPackID.AllowDBNull = false;
                this.columnBarcode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow NewDocMobGroupPackOrderGroupPacksRow() {
                return ((DocMobGroupPackOrderGroupPacksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DocMobGroupPackOrderGroupPacksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DocMobGroupPackOrderGroupPacksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocMobGroupPackOrderGroupPacksRowChanged != null)) {
                    this.DocMobGroupPackOrderGroupPacksRowChanged(this, new DocMobGroupPackOrderGroupPacksRowChangeEvent(((DocMobGroupPackOrderGroupPacksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocMobGroupPackOrderGroupPacksRowChanging != null)) {
                    this.DocMobGroupPackOrderGroupPacksRowChanging(this, new DocMobGroupPackOrderGroupPacksRowChangeEvent(((DocMobGroupPackOrderGroupPacksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocMobGroupPackOrderGroupPacksRowDeleted != null)) {
                    this.DocMobGroupPackOrderGroupPacksRowDeleted(this, new DocMobGroupPackOrderGroupPacksRowChangeEvent(((DocMobGroupPackOrderGroupPacksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocMobGroupPackOrderGroupPacksRowDeleting != null)) {
                    this.DocMobGroupPackOrderGroupPacksRowDeleting(this, new DocMobGroupPackOrderGroupPacksRowChangeEvent(((DocMobGroupPackOrderGroupPacksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocMobGroupPackOrderGroupPacksRow(DocMobGroupPackOrderGroupPacksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GammaDataSet ds = new GammaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocMobGroupPackOrderGroupPacksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocMobGroupPackOrdersDataTable : global::System.Data.TypedTableBase<DocMobGroupPackOrdersRow> {
            
            private global::System.Data.DataColumn columnDocMobGroupPackOrderID;
            
            private global::System.Data.DataColumn columnOrderNumber1C;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnConsignee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersDataTable() {
                this.TableName = "DocMobGroupPackOrders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocMobGroupPackOrdersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocMobGroupPackOrderIDColumn {
                get {
                    return this.columnDocMobGroupPackOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderNumber1CColumn {
                get {
                    return this.columnOrderNumber1C;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsigneeColumn {
                get {
                    return this.columnConsignee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow this[int index] {
                get {
                    return ((DocMobGroupPackOrdersRow)(this.Rows[index]));
                }
            }
            
            public event DocMobGroupPackOrdersRowChangeEventHandler DocMobGroupPackOrdersRowChanging;
            
            public event DocMobGroupPackOrdersRowChangeEventHandler DocMobGroupPackOrdersRowChanged;
            
            public event DocMobGroupPackOrdersRowChangeEventHandler DocMobGroupPackOrdersRowDeleting;
            
            public event DocMobGroupPackOrdersRowChangeEventHandler DocMobGroupPackOrdersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocMobGroupPackOrdersRow(DocMobGroupPackOrdersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow AddDocMobGroupPackOrdersRow(string OrderNumber1C, string SerialNumber, System.DateTime Date, string Consignee) {
                DocMobGroupPackOrdersRow rowDocMobGroupPackOrdersRow = ((DocMobGroupPackOrdersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OrderNumber1C,
                        SerialNumber,
                        Date,
                        Consignee};
                rowDocMobGroupPackOrdersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDocMobGroupPackOrdersRow);
                return rowDocMobGroupPackOrdersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow FindByDocMobGroupPackOrderID(long DocMobGroupPackOrderID) {
                return ((DocMobGroupPackOrdersRow)(this.Rows.Find(new object[] {
                            DocMobGroupPackOrderID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DocMobGroupPackOrdersDataTable cln = ((DocMobGroupPackOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DocMobGroupPackOrdersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocMobGroupPackOrderID = base.Columns["DocMobGroupPackOrderID"];
                this.columnOrderNumber1C = base.Columns["OrderNumber1C"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnDate = base.Columns["Date"];
                this.columnConsignee = base.Columns["Consignee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocMobGroupPackOrderID = new global::System.Data.DataColumn("DocMobGroupPackOrderID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocMobGroupPackOrderID);
                this.columnOrderNumber1C = new global::System.Data.DataColumn("OrderNumber1C", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderNumber1C);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnConsignee = new global::System.Data.DataColumn("Consignee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignee);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDocMobGroupPackOrderID}, true));
                this.columnDocMobGroupPackOrderID.AutoIncrement = true;
                this.columnDocMobGroupPackOrderID.AutoIncrementSeed = -1;
                this.columnDocMobGroupPackOrderID.AutoIncrementStep = -1;
                this.columnDocMobGroupPackOrderID.AllowDBNull = false;
                this.columnDocMobGroupPackOrderID.ReadOnly = true;
                this.columnDocMobGroupPackOrderID.Unique = true;
                this.columnOrderNumber1C.MaxLength = 128;
                this.columnSerialNumber.MaxLength = 128;
                this.columnConsignee.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow NewDocMobGroupPackOrdersRow() {
                return ((DocMobGroupPackOrdersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DocMobGroupPackOrdersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DocMobGroupPackOrdersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocMobGroupPackOrdersRowChanged != null)) {
                    this.DocMobGroupPackOrdersRowChanged(this, new DocMobGroupPackOrdersRowChangeEvent(((DocMobGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocMobGroupPackOrdersRowChanging != null)) {
                    this.DocMobGroupPackOrdersRowChanging(this, new DocMobGroupPackOrdersRowChangeEvent(((DocMobGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocMobGroupPackOrdersRowDeleted != null)) {
                    this.DocMobGroupPackOrdersRowDeleted(this, new DocMobGroupPackOrdersRowChangeEvent(((DocMobGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocMobGroupPackOrdersRowDeleting != null)) {
                    this.DocMobGroupPackOrdersRowDeleting(this, new DocMobGroupPackOrdersRowChangeEvent(((DocMobGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocMobGroupPackOrdersRow(DocMobGroupPackOrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GammaDataSet ds = new GammaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocMobGroupPackOrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vGroupPackOrdersDataTable : global::System.Data.TypedTableBase<vGroupPackOrdersRow> {
            
            private global::System.Data.DataColumn columnDocMobGroupPackOrderID;
            
            private global::System.Data.DataColumn columnOrderNumber1C;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnGrossWeight;
            
            private global::System.Data.DataColumn columnNomenclature;
            
            private global::System.Data.DataColumn columnConsignee;
            
            private global::System.Data.DataColumn columnShiftID;
            
            private global::System.Data.DataColumn columnVehicleNumber;
            
            private global::System.Data.DataColumn columnBarcode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersDataTable() {
                this.TableName = "vGroupPackOrders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vGroupPackOrdersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocMobGroupPackOrderIDColumn {
                get {
                    return this.columnDocMobGroupPackOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderNumber1CColumn {
                get {
                    return this.columnOrderNumber1C;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWeightColumn {
                get {
                    return this.columnGrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NomenclatureColumn {
                get {
                    return this.columnNomenclature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsigneeColumn {
                get {
                    return this.columnConsignee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShiftIDColumn {
                get {
                    return this.columnShiftID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VehicleNumberColumn {
                get {
                    return this.columnVehicleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeColumn {
                get {
                    return this.columnBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRow this[int index] {
                get {
                    return ((vGroupPackOrdersRow)(this.Rows[index]));
                }
            }
            
            public event vGroupPackOrdersRowChangeEventHandler vGroupPackOrdersRowChanging;
            
            public event vGroupPackOrdersRowChangeEventHandler vGroupPackOrdersRowChanged;
            
            public event vGroupPackOrdersRowChangeEventHandler vGroupPackOrdersRowDeleting;
            
            public event vGroupPackOrdersRowChangeEventHandler vGroupPackOrdersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvGroupPackOrdersRow(vGroupPackOrdersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRow AddvGroupPackOrdersRow(long DocMobGroupPackOrderID, string OrderNumber1C, string SerialNumber, System.DateTime Date, string Number, int Weight, int GrossWeight, string Nomenclature, string Consignee, byte ShiftID, string VehicleNumber, string Barcode) {
                vGroupPackOrdersRow rowvGroupPackOrdersRow = ((vGroupPackOrdersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DocMobGroupPackOrderID,
                        OrderNumber1C,
                        SerialNumber,
                        Date,
                        Number,
                        Weight,
                        GrossWeight,
                        Nomenclature,
                        Consignee,
                        ShiftID,
                        VehicleNumber,
                        Barcode};
                rowvGroupPackOrdersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvGroupPackOrdersRow);
                return rowvGroupPackOrdersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRow FindByDocMobGroupPackOrderID(long DocMobGroupPackOrderID) {
                return ((vGroupPackOrdersRow)(this.Rows.Find(new object[] {
                            DocMobGroupPackOrderID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vGroupPackOrdersDataTable cln = ((vGroupPackOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vGroupPackOrdersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocMobGroupPackOrderID = base.Columns["DocMobGroupPackOrderID"];
                this.columnOrderNumber1C = base.Columns["OrderNumber1C"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnDate = base.Columns["Date"];
                this.columnNumber = base.Columns["Number"];
                this.columnWeight = base.Columns["Weight"];
                this.columnGrossWeight = base.Columns["GrossWeight"];
                this.columnNomenclature = base.Columns["Nomenclature"];
                this.columnConsignee = base.Columns["Consignee"];
                this.columnShiftID = base.Columns["ShiftID"];
                this.columnVehicleNumber = base.Columns["VehicleNumber"];
                this.columnBarcode = base.Columns["Barcode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocMobGroupPackOrderID = new global::System.Data.DataColumn("DocMobGroupPackOrderID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocMobGroupPackOrderID);
                this.columnOrderNumber1C = new global::System.Data.DataColumn("OrderNumber1C", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderNumber1C);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnGrossWeight = new global::System.Data.DataColumn("GrossWeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWeight);
                this.columnNomenclature = new global::System.Data.DataColumn("Nomenclature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNomenclature);
                this.columnConsignee = new global::System.Data.DataColumn("Consignee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignee);
                this.columnShiftID = new global::System.Data.DataColumn("ShiftID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShiftID);
                this.columnVehicleNumber = new global::System.Data.DataColumn("VehicleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleNumber);
                this.columnBarcode = new global::System.Data.DataColumn("Barcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDocMobGroupPackOrderID}, true));
                this.columnDocMobGroupPackOrderID.AllowDBNull = false;
                this.columnDocMobGroupPackOrderID.Unique = true;
                this.columnOrderNumber1C.MaxLength = 128;
                this.columnSerialNumber.MaxLength = 128;
                this.columnNumber.MaxLength = 50;
                this.columnNomenclature.ReadOnly = true;
                this.columnNomenclature.MaxLength = 209;
                this.columnConsignee.MaxLength = 255;
                this.columnVehicleNumber.MaxLength = 255;
                this.columnBarcode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRow NewvGroupPackOrdersRow() {
                return ((vGroupPackOrdersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vGroupPackOrdersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vGroupPackOrdersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vGroupPackOrdersRowChanged != null)) {
                    this.vGroupPackOrdersRowChanged(this, new vGroupPackOrdersRowChangeEvent(((vGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vGroupPackOrdersRowChanging != null)) {
                    this.vGroupPackOrdersRowChanging(this, new vGroupPackOrdersRowChangeEvent(((vGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vGroupPackOrdersRowDeleted != null)) {
                    this.vGroupPackOrdersRowDeleted(this, new vGroupPackOrdersRowChangeEvent(((vGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vGroupPackOrdersRowDeleting != null)) {
                    this.vGroupPackOrdersRowDeleting(this, new vGroupPackOrdersRowChangeEvent(((vGroupPackOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevGroupPackOrdersRow(vGroupPackOrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GammaDataSet ds = new GammaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vGroupPackOrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DocMobGroupPackOrderGroupPacksRow : global::System.Data.DataRow {
            
            private DocMobGroupPackOrderGroupPacksDataTable tableDocMobGroupPackOrderGroupPacks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocMobGroupPackOrderGroupPacksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocMobGroupPackOrderGroupPacks = ((DocMobGroupPackOrderGroupPacksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DocMobGroupPackOrderID {
                get {
                    return ((long)(this[this.tableDocMobGroupPackOrderGroupPacks.DocMobGroupPackOrderIDColumn]));
                }
                set {
                    this[this.tableDocMobGroupPackOrderGroupPacks.DocMobGroupPackOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long GroupPackID {
                get {
                    return ((long)(this[this.tableDocMobGroupPackOrderGroupPacks.GroupPackIDColumn]));
                }
                set {
                    this[this.tableDocMobGroupPackOrderGroupPacks.GroupPackIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barcode {
                get {
                    if (this.IsBarcodeNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableDocMobGroupPackOrderGroupPacks.BarcodeColumn]));
                    }
                }
                set {
                    this[this.tableDocMobGroupPackOrderGroupPacks.BarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow DocMobGroupPackOrdersRow {
                get {
                    return ((DocMobGroupPackOrdersRow)(this.GetParentRow(this.Table.ParentRelations["FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodeNull() {
                return this.IsNull(this.tableDocMobGroupPackOrderGroupPacks.BarcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodeNull() {
                this[this.tableDocMobGroupPackOrderGroupPacks.BarcodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DocMobGroupPackOrdersRow : global::System.Data.DataRow {
            
            private DocMobGroupPackOrdersDataTable tableDocMobGroupPackOrders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocMobGroupPackOrdersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocMobGroupPackOrders = ((DocMobGroupPackOrdersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DocMobGroupPackOrderID {
                get {
                    return ((long)(this[this.tableDocMobGroupPackOrders.DocMobGroupPackOrderIDColumn]));
                }
                set {
                    this[this.tableDocMobGroupPackOrders.DocMobGroupPackOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderNumber1C {
                get {
                    try {
                        return ((string)(this[this.tableDocMobGroupPackOrders.OrderNumber1CColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OrderNumber1C\' в таблице \'DocMobGroupPackOrders\' равно DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDocMobGroupPackOrders.OrderNumber1CColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableDocMobGroupPackOrders.SerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'SerialNumber\' в таблице \'DocMobGroupPackOrders\' равно DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDocMobGroupPackOrders.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDocMobGroupPackOrders.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Date\' в таблице \'DocMobGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocMobGroupPackOrders.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Consignee {
                get {
                    try {
                        return ((string)(this[this.tableDocMobGroupPackOrders.ConsigneeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Consignee\' в таблице \'DocMobGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocMobGroupPackOrders.ConsigneeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderNumber1CNull() {
                return this.IsNull(this.tableDocMobGroupPackOrders.OrderNumber1CColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderNumber1CNull() {
                this[this.tableDocMobGroupPackOrders.OrderNumber1CColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNumberNull() {
                return this.IsNull(this.tableDocMobGroupPackOrders.SerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNumberNull() {
                this[this.tableDocMobGroupPackOrders.SerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableDocMobGroupPackOrders.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableDocMobGroupPackOrders.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsigneeNull() {
                return this.IsNull(this.tableDocMobGroupPackOrders.ConsigneeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsigneeNull() {
                this[this.tableDocMobGroupPackOrders.ConsigneeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow[] GetDocMobGroupPackOrderGroupPacksRows() {
                if ((this.Table.ChildRelations["FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders"] == null)) {
                    return new DocMobGroupPackOrderGroupPacksRow[0];
                }
                else {
                    return ((DocMobGroupPackOrderGroupPacksRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DocMobGroupPackOrderGroupPacks_DocMobGroupPackOrders"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class vGroupPackOrdersRow : global::System.Data.DataRow {
            
            private vGroupPackOrdersDataTable tablevGroupPackOrders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vGroupPackOrdersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevGroupPackOrders = ((vGroupPackOrdersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DocMobGroupPackOrderID {
                get {
                    return ((long)(this[this.tablevGroupPackOrders.DocMobGroupPackOrderIDColumn]));
                }
                set {
                    this[this.tablevGroupPackOrders.DocMobGroupPackOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderNumber1C {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.OrderNumber1CColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'OrderNumber1C\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.OrderNumber1CColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNumber {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.SerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'SerialNumber\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablevGroupPackOrders.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Date\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Number\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tablevGroupPackOrders.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Weight\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrossWeight {
                get {
                    try {
                        return ((int)(this[this.tablevGroupPackOrders.GrossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'GrossWeight\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.GrossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nomenclature {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.NomenclatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Nomenclature\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.NomenclatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Consignee {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.ConsigneeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Consignee\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.ConsigneeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ShiftID {
                get {
                    try {
                        return ((byte)(this[this.tablevGroupPackOrders.ShiftIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ShiftID\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.ShiftIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleNumber {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.VehicleNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'VehicleNumber\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.VehicleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barcode {
                get {
                    try {
                        return ((string)(this[this.tablevGroupPackOrders.BarcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Barcode\' в таблице \'vGroupPackOrders\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tablevGroupPackOrders.BarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderNumber1CNull() {
                return this.IsNull(this.tablevGroupPackOrders.OrderNumber1CColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderNumber1CNull() {
                this[this.tablevGroupPackOrders.OrderNumber1CColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNumberNull() {
                return this.IsNull(this.tablevGroupPackOrders.SerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNumberNull() {
                this[this.tablevGroupPackOrders.SerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablevGroupPackOrders.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablevGroupPackOrders.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tablevGroupPackOrders.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tablevGroupPackOrders.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tablevGroupPackOrders.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tablevGroupPackOrders.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWeightNull() {
                return this.IsNull(this.tablevGroupPackOrders.GrossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWeightNull() {
                this[this.tablevGroupPackOrders.GrossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNomenclatureNull() {
                return this.IsNull(this.tablevGroupPackOrders.NomenclatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNomenclatureNull() {
                this[this.tablevGroupPackOrders.NomenclatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsigneeNull() {
                return this.IsNull(this.tablevGroupPackOrders.ConsigneeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsigneeNull() {
                this[this.tablevGroupPackOrders.ConsigneeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShiftIDNull() {
                return this.IsNull(this.tablevGroupPackOrders.ShiftIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShiftIDNull() {
                this[this.tablevGroupPackOrders.ShiftIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVehicleNumberNull() {
                return this.IsNull(this.tablevGroupPackOrders.VehicleNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVehicleNumberNull() {
                this[this.tablevGroupPackOrders.VehicleNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodeNull() {
                return this.IsNull(this.tablevGroupPackOrders.BarcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodeNull() {
                this[this.tablevGroupPackOrders.BarcodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class DocMobGroupPackOrderGroupPacksRowChangeEvent : global::System.EventArgs {
            
            private DocMobGroupPackOrderGroupPacksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRowChangeEvent(DocMobGroupPackOrderGroupPacksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrderGroupPacksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class DocMobGroupPackOrdersRowChangeEvent : global::System.EventArgs {
            
            private DocMobGroupPackOrdersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRowChangeEvent(DocMobGroupPackOrdersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocMobGroupPackOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class vGroupPackOrdersRowChangeEvent : global::System.EventArgs {
            
            private vGroupPackOrdersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRowChangeEvent(vGroupPackOrdersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vGroupPackOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace gamma_mob.GammaDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class DocMobGroupPackOrderGroupPacksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocMobGroupPackOrderGroupPacksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DocMobGroupPackOrderGroupPacks";
            tableMapping.ColumnMappings.Add("DocMobGroupPackOrderID", "DocMobGroupPackOrderID");
            tableMapping.ColumnMappings.Add("GroupPackID", "GroupPackID");
            tableMapping.ColumnMappings.Add("Barcode", "Barcode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM DocMobGroupPackOrderGroupPacks\r\nWHERE        (DocMobGroupPackOrderID " +
                "= @Original_DocMobGroupPackOrderID) AND (GroupPackID = @Original_GroupPackID)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_GroupPackID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "GroupPackID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO DocMobGroupPackOrderGroupPacks\r\n                         (DocMobGroup" +
                "PackOrderID, GroupPackID)\r\nVALUES        (@DocMobGroupPackOrderID,@GroupPackID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@GroupPackID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "GroupPackID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       DocMobGroupPackOrderGroupPacks
SET                DocMobGroupPackOrderID = @DocMobGroupPackOrderID, GroupPackID = @GroupPackID
WHERE        (DocMobGroupPackOrderID = @Original_DocMobGroupPackOrderID) AND (GroupPackID = @Original_GroupPackID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@GroupPackID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "GroupPackID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_GroupPackID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "GroupPackID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=Gamma;Initial Catalog=Gamma;Persist Security Info=True;User ID=sa;Pas" +
                "sword=asutp1;Connect Timeout=5;";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        a.DocMobGroupPackOrderID, a.GroupPackID, b.Barcode\r\nFROM           " +
                " DocMobGroupPackOrderGroupPacks AS a INNER JOIN\r\n                         GroupP" +
                "acks AS b ON a.GroupPackID = b.GroupPackID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.GetDocOrderGroupPacks";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.GetNomenclatureSumWeight";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@GroupPackID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable dataTable = new GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDocOrderID(GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable dataTable, global::System.Nullable<long> DocMobGroupPackOrderID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DocMobGroupPackOrderID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(DocMobGroupPackOrderID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable GetDataByDocOrderID(global::System.Nullable<long> DocMobGroupPackOrderID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DocMobGroupPackOrderID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(DocMobGroupPackOrderID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable dataTable = new GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(GammaDataSet.DocMobGroupPackOrderGroupPacksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(GammaDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DocMobGroupPackOrderGroupPacks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual object GetNomenclatureSumWeight(global::System.Nullable<long> GroupPackID, global::System.Nullable<long> DocOrderID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((GroupPackID.HasValue == true)) {
                command.Parameters[1].Value = ((long)(GroupPackID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DocOrderID.HasValue == true)) {
                command.Parameters[2].Value = ((long)(DocOrderID.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class DocOrders : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocOrders() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DocMobGroupPackOrders";
            tableMapping.ColumnMappings.Add("DocMobGroupPackOrderID", "DocMobGroupPackOrderID");
            tableMapping.ColumnMappings.Add("OrderNumber1C", "OrderNumber1C");
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Consignee", "Consignee");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DocMobGroupPackOrders] WHERE (([DocMobGroupPackOrderID] = @Ori" +
                "ginal_DocMobGroupPackOrderID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DocMobGroupPackOrders] ([OrderNumber1C], [Consignee], [SerialNumber], [Date]) VALUES (@OrderNumber1C, @Consignee, @SerialNumber, @Date);
SELECT DocMobGroupPackOrderID, OrderNumber1C, Consignee, SerialNumber, Date FROM DocMobGroupPackOrders WHERE (DocMobGroupPackOrderID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@OrderNumber1C";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "OrderNumber1C";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Consignee";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "Consignee";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SerialNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "SerialNumber";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "Date";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DocMobGroupPackOrders] SET [OrderNumber1C] = @OrderNumber1C, [Consignee] = @Consignee, [SerialNumber] = @SerialNumber, [Date] = @Date WHERE (([DocMobGroupPackOrderID] = @Original_DocMobGroupPackOrderID));
SELECT DocMobGroupPackOrderID, OrderNumber1C, Consignee, SerialNumber, Date FROM DocMobGroupPackOrders WHERE (DocMobGroupPackOrderID = @DocMobGroupPackOrderID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@OrderNumber1C";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "OrderNumber1C";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Consignee";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "Consignee";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SerialNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = "SerialNumber";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "Date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=Gamma;Initial Catalog=Gamma;Persist Security Info=True;User ID=sa;Pas" +
                "sword=asutp1;Connect Timeout=5";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DocMobGroupPackOrderID, OrderNumber1C, Consignee, SerialNumber, Date FROM " +
                "dbo.DocMobGroupPackOrders";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.GetTerminalDocOrders";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SerialNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 128;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GammaDataSet.DocMobGroupPackOrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GammaDataSet.DocMobGroupPackOrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GammaDataSet.DocMobGroupPackOrdersDataTable dataTable = new GammaDataSet.DocMobGroupPackOrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(GammaDataSet.DocMobGroupPackOrdersDataTable dataTable, string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((SerialNumber == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(SerialNumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual GammaDataSet.DocMobGroupPackOrdersDataTable GetDataBy(string SerialNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((SerialNumber == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(SerialNumber));
            }
            GammaDataSet.DocMobGroupPackOrdersDataTable dataTable = new GammaDataSet.DocMobGroupPackOrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(GammaDataSet.DocMobGroupPackOrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(GammaDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DocMobGroupPackOrders");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_DocMobGroupPackOrderID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_DocMobGroupPackOrderID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string OrderNumber1C, string Consignee, string SerialNumber, global::System.Nullable<global::System.DateTime> Date) {
            if ((OrderNumber1C == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(OrderNumber1C));
            }
            if ((Consignee == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Consignee));
            }
            if ((SerialNumber == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SerialNumber));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string OrderNumber1C, string Consignee, string SerialNumber, global::System.Nullable<global::System.DateTime> Date, long Original_DocMobGroupPackOrderID, long DocMobGroupPackOrderID) {
            if ((OrderNumber1C == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(OrderNumber1C));
            }
            if ((Consignee == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Consignee));
            }
            if ((SerialNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SerialNumber));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(Original_DocMobGroupPackOrderID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(DocMobGroupPackOrderID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string OrderNumber1C, string Consignee, string SerialNumber, global::System.Nullable<global::System.DateTime> Date, long Original_DocMobGroupPackOrderID) {
            return this.Update(OrderNumber1C, Consignee, SerialNumber, Date, Original_DocMobGroupPackOrderID, Original_DocMobGroupPackOrderID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class vGroupPackOrdersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vGroupPackOrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "vGroupPackOrders";
            tableMapping.ColumnMappings.Add("DocMobGroupPackOrderID", "DocMobGroupPackOrderID");
            tableMapping.ColumnMappings.Add("OrderNumber1C", "OrderNumber1C");
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Weight", "Weight");
            tableMapping.ColumnMappings.Add("GrossWeight", "GrossWeight");
            tableMapping.ColumnMappings.Add("Nomenclature", "Nomenclature");
            tableMapping.ColumnMappings.Add("Consignee", "Consignee");
            tableMapping.ColumnMappings.Add("ShiftID", "ShiftID");
            tableMapping.ColumnMappings.Add("VehicleNumber", "VehicleNumber");
            tableMapping.ColumnMappings.Add("Barcode", "Barcode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=Gamma;Initial Catalog=Gamma;Persist Security Info=True;User ID=sa;Pas" +
                "sword=asutp1;Connect Timeout=5;";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        DocMobGroupPackOrderID, OrderNumber1C, SerialNumber, Date, Number, Barcode, Weight, GrossWeight, Nomenclature, Consignee, ShiftID, VehicleNumber
FROM            vGroupPackOrders
WHERE        (DocMobGroupPackOrderID = @DocMobGroupPackOrderID)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DocMobGroupPackOrderID";
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "DocMobGroupPackOrderID";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByID(GammaDataSet.vGroupPackOrdersDataTable dataTable, long DocMobGroupPackOrderID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(DocMobGroupPackOrderID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GammaDataSet.vGroupPackOrdersDataTable GetData(long DocMobGroupPackOrderID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(DocMobGroupPackOrderID));
            GammaDataSet.vGroupPackOrdersDataTable dataTable = new GammaDataSet.vGroupPackOrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}
namespace GammaDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
